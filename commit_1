#include <iostream>
#include <vector>
#include <algorithm>

    struct Product {
        std::string name;
    double price;
        std::string specifications;
    };

    class ShoppingCart {
        private:
    std::vector<Product> products;

        public:
    void addProduct(const Product& product) {
        products.push_back(product);
    }

    // Виводимо повідомлення якщо кошик порожній
    void displayCart() const {
        if (products.empty()) {
            std::cout << "Your cart is empty." << std::endl;
            return;
        }

        std::cout << "-----------------------------------------------" << std::endl;
        std::cout << "           Items in Your Shopping Cart         " << std::endl;
        std::cout << "-----------------------------------------------" << std::endl;

    //Вивідимо назву, ціну, характеристику, та список товарів
        for (const auto& product : products) {
            std::cout << "Name: " << product.name << std::endl;
            std::cout << "Price: $" << product.price << std::endl;
            std::cout << "Characteristics: " << product.specifications << std::endl;
            std::cout << "-----------------------------------------------" << std::endl;
        }
    }
        //Розрахунок загальної ціни товарів в кошику
    double calculateTotalPrice() const {
        double totalPrice = 0.0;
        for (const auto& product : products) {
            totalPrice += product.price;
        }
        return totalPrice;
    }
};

    class User {
        private:
    std::string username;
    std::string password;
    ShoppingCart cart;

     public:
    User(const std::string& username, const std::string& password)
            : username(username), password(password) {}

    std::string getUsername() const {
        return username;
    }

    bool checkPassword(const std::string& inputPassword) const {
        return password == inputPassword;
    }

    ShoppingCart& getCart() {
        return cart;
    }
};
        //Вивід списку доступних товарів ,ціни, валюти
        void viewProducts(const std::vector<Product>& availableProducts) {
             std::cout << "Available products:" << std::endl;
            for (size_t i = 0; i < availableProducts.size(); ++i) {
        const auto& product = availableProducts[i];
            std::cout << i + 1 << ". " << product.name << " - $" << product.price << std::endl;
    }
}

        bool isUserExists(const std::vector<User>& users, const std::string& username, const std::string& password) {
             return std::any_of(users.begin(), users.end(),
                       [&](const User& user) { return user.getUsername() == username && user.checkPassword(password); });
}

    void addToCart(User& currentUser, const std::vector<Product>& availableProducts) {
    viewProducts(availableProducts);

    size_t productIndex;
    while (true) {
        std::cout << "Enter the number of the product you want to add to the cart: ";
        std::cin >> productIndex;

        if (productIndex > 0 && productIndex <= availableProducts.size()) {
            break;
        } else {
            std::cout << "Invalid item number. Try again." << std::endl;
        }
    }

    const auto& product = availableProducts[productIndex - 1];
    currentUser.getCart().addProduct(product);
    std::cout << "The product has been added to your shopping cart." << std::endl;
}

        int main() {
    std::vector<Product> availableProducts{
            {"iPhone 14 Pro Max", 1799.99, "512GB. Color: Purple"},
            {"iPhone 14 Pro", 1399.99, "512GB. Color: Gold"},
            {"iPhone 14", 999.99, "512GB. Color: Red"}
    };

            // Данні поточного користувача
    std::vector<User> users;
    User currentUser("", "");

    std::cout << "Welcome to the online store \"Cellmart\"!" << std::endl;

            //Загальне меню магазину
    while (true) {
        std::cout << std::endl;
        std::cout << "1. Create an account" << std::endl;
        std::cout << "2. Log in" << std::endl;
        std::cout << "3. View available products" << std::endl;
        std::cout << "4. Add a product to your shopping cart" << std::endl;
        std::cout << "5. View your shopping cart and total price" << std::endl;
        std::cout << "6. Delete your account" << std::endl;
        std::cout << "7. Exit" << std::endl;
        std::cout << "Select an action: ";

        int choice;
        std::cin >> choice;

        switch (choice) {
            case 1: {
                std::string username;
                std::string password;

                std::cout << "Enter a username: ";
                std::cin >> username;

                std::cout << "Enter a password: ";
                std::cin >> password;

                users.emplace_back(username, password);
                std::cout << "Account created successfully!" << std::endl;
                break;
            }
            case 2: {
                std::string username;
                std::string password;

                std::cout << "Enter your username: ";
                std::cin >> username;

                std::cout << "Enter your password: ";
                std::cin >> password;

                if (isUserExists(users, username, password)) {
                    currentUser = User(username, password);
                    std::cout << "Logged in as " << currentUser.getUsername() << std::endl;
                } else {
                    std::cout << "Invalid username or password." << std::endl;
                }
                break;
            }
            case 3: {
                viewProducts(availableProducts);
                break;
            }
            case 4: {
                if (currentUser.getUsername() == "") {
                    std::cout << "You need to log in first." << std::endl;
                    break;
                }

                addToCart(currentUser, availableProducts);
                break;
            }
            case 5: {
                if (currentUser.getUsername() == "") {
                    std::cout << "You need to log in first." << std::endl;
                    break;
                }

                std::cout << "Shopping cart of " << currentUser.getUsername() << ":" << std::endl;
                currentUser.getCart().displayCart();
                std::cout << "Total price: $" << currentUser.getCart().calculateTotalPrice() << std::endl;
                break;
            }
            case 6: {
                if (currentUser.getUsername() == "") {
                    std::cout << "You need to log in first." << std::endl;
                    break;
                }

                users.erase(std::remove_if(users.begin(), users.end(),
                                           [&](const User& user) { return user.getUsername() == currentUser.getUsername(); }),
                            users.end());

                currentUser = User("", "");
                std::cout << "Account deleted successfully." << std::endl;
                break;
            }
            case 7: {
                std::cout << "Goodbye!" << std::endl;
                return 0;
            }
            default: {
                std::cout << "Wrong choice! Try again." << std::endl;
                break;
            }
        }
    }
}
